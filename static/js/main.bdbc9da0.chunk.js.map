{"version":3,"sources":["reducers/index.js","action/actionTypes.js","components/DataEntryForm/DataEntryForm.js","action/index.js","additionalАunctions/getId.js","components/LIstItem/ListItem.js","components/LIst/List.js","localStorage/storageComments.js","constants/constants.js","containers/LIstContainer/ListComment.js","components/App/AppComponent.js","index.js"],"names":["widgetCommentsReducer","state","id","name","comment","date","type","filter","DataEntryForm","inputChangeHandler","e","target","value","setState","formSubmitHandler","preventDefault","addComment","props","Date","toLocaleString","this","className","onSubmit","onChange","placeholder","required","Component","connect","Math","random","toString","ListItem","deleteComment","commentElements","onClick","List","stateComments","listItems","map","key","LocalStorageAPI","fetch","response","ok","serialisedState","localStorage","getItem","JSON","parse","console","log","status","getState","setItem","stringify","dispatch","saveState","App","Fragment","getInitialState","then","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"kQAqBeA,EAnBe,WAAmD,IAAlDC,EAAiD,uDAAzC,GAAyC,yCAAnCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAClE,OAAOA,GACH,ICJmB,cDKf,MAAM,GAAN,mBACUL,GADV,CACgB,CACRC,KACAC,OACAC,UACAC,UAGZ,ICZsB,iBDapB,OAAOJ,EAAMM,QAAO,SAAAH,GAAO,OAAIA,EAAQF,KAAOA,KAE9C,QACE,OAAOD,I,oCEVbO,G,kNACFP,MAAQ,CACJE,KAAM,GACNC,QAAS,I,EAGbK,mBAAqB,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAlBR,EADmB,EACnBA,KAAOS,EADY,EACZA,MACb,EAAKC,SAAL,eACKV,EAAOS,K,EAIfE,kBAAoB,SAACJ,GAClBA,EAAEK,iBADsB,MAED,EAAKd,MAAtBE,EAFkB,EAElBA,KAAMC,EAFY,EAEZA,SAGbY,EAFqB,EAAKC,MAAnBD,YAEIb,EAAMC,GAAS,IAAIc,MAAOC,kBAErC,EAAKN,SAAS,CACZV,KAAM,GACNC,QAAS,M,uDAIJ,IAAD,EACoBgB,KAAKnB,MAAtBE,EADH,EACGA,KAAMC,EADT,EACSA,QACNK,EAAyCW,KAAzCX,mBAAoBK,EAAqBM,KAArBN,kBAC3B,OACA,yBAAKO,UAAU,YACX,6IACA,0BAAMC,SAAUR,GACZ,2BAAOS,SAAUd,EAAoBH,KAAK,OAAOH,KAAK,OAAOqB,YAAY,yFAAmBZ,MAAOT,EAAMsB,UAAQ,IACjH,6BACI,8BAAUF,SAAUd,EAAoBN,KAAK,UAAUqB,YAAY,mIAA0BZ,MAAOR,EAASqB,UAAQ,KAEzH,4BAAQnB,KAAK,UAAb,6H,GArCYoB,cA4CbC,cAAQ,KAAM,CAACX,WChDJ,SAACb,EAAMC,EAASC,GACtC,MAAO,CACHC,KFLmB,cEMnBJ,GCLE,IAAN,WAA6B,IAAd0B,KAAKC,WAAeC,SAAS,KDMxC3B,OACAC,UACAC,UD0COsB,CAA4BnB,GG/B5BuB,EAlBE,SAACd,GAAU,IACjBe,EAA6Df,EAA7De,cADgB,EAC6Cf,EAA9CgB,gBAAkB7B,EADjB,EACiBA,QAASD,EAD1B,EAC0BA,KAAMD,EADhC,EACgCA,GAAIG,EADpC,EACoCA,KACnD,OACI,wBAAIgB,UAAU,WACV,6BACI,4BAAQA,UAAU,SAASa,QAAS,kBAAMF,EAAc9B,KAAxD,UACA,0BAAMmB,UAAU,QAAQhB,IAE5B,yBAAKgB,UAAU,kBAAf,sBACI,uBAAGA,UAAU,kBAAkBlB,IAEnC,yBAAKkB,UAAU,kBAAf,sEACI,2BAAIjB,MCCb+B,EAXF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,cAAeJ,EAAkB,EAAlBA,cACpBK,EAAYD,EAAcE,KAAI,SAACL,GAAD,OAChC,kBAAC,EAAD,CAAUD,cAAeA,EAAeC,gBAAiBA,EAAiBM,IAAKN,EAAgB/B,QAEnG,OACQ,4BACKmC,I,wBCRJG,EAAb,4OAE0BC,MCJM,gDDEhC,YAESC,EAFT,QAGmBC,GAHnB,oBAIcC,EAAkBC,aAAaC,QCLjB,kBDC5B,yCAKuC,IALvC,gCAMiBC,KAAKC,MAAMJ,IAN5B,QASQK,QAAQC,IAAI,wCAAYR,EAASS,QATzC,2KAakBC,GAblB,uFAciCX,MChBD,gDDEhC,QAceC,EAdf,QAeuBC,GACTE,aAAaQ,QCjBC,iBDiBqBN,KAAKO,UACpCF,IAINH,QAAQC,IAAI,wCAAYR,EAASS,QArB7C,yGEmBexB,mBANf,SAAyB1B,GACrB,MAAO,CACHmC,cAAenC,MAIiB,SAAAsD,GAAQ,MAAK,CACjDvB,cAAe,SAAA9B,GAAE,OAAIqD,ENTI,SAACrD,GAC1B,MAAO,CACHI,KFdsB,iBEetBJ,MMM0B8B,CAAc9B,QADjCyB,EAdM,SAAC,GAAmC,IAAlCS,EAAiC,EAAjCA,cAAeJ,EAAkB,EAAlBA,cAGjC,OAFuB,IAAIQ,GACZgB,UAAUpB,GAErB,kBAAC,EAAD,CAAMA,cAAeA,EAAeJ,cAAeA,OCO7CyB,E,uKATX,OACI,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALQhC,a,OCMM,IAAIc,GAEZmB,kBAAkBC,MAAK,SAAAlB,GACrC,IAAMmB,EAASC,YACT9D,EACA0C,EACAqB,YACEC,MAIRC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,c","file":"static/js/main.bdbc9da0.chunk.js","sourcesContent":["import {ADD_COMMENT, DELETE_COMMENT} from '../action/actionTypes'\r\n\r\nconst widgetCommentsReducer = (state = [],  {id, name, comment, date, type}) => {\r\n    switch(type){\r\n        case ADD_COMMENT:\r\n            return [\r\n                   ...state,{\r\n                    id,\r\n                    name,\r\n                    comment,\r\n                    date\r\n                  },\r\n            ]\r\n        case DELETE_COMMENT:\r\n          return state.filter(comment => comment.id !== id);  \r\n\r\n          default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default widgetCommentsReducer;","export const ADD_COMMENT = 'ADD_COMMENT'\r\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\r\n\r\nexport const FETCH_STATE_SUCCESS = 'FETCH_STATE_SUCCESS'\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport {addComment} from '../../action'\r\n\r\nimport '../../style/App.css'\r\n\r\nclass DataEntryForm extends Component {   \r\n    state = {\r\n        name: '',\r\n        comment: '' \r\n    }\r\n    \r\n    inputChangeHandler = (e) => {\r\n      const {name , value} = e.target;\r\n       this.setState({\r\n           [name]: value,\r\n       })\r\n    }\r\n  \r\n    formSubmitHandler = (e) => {\r\n       e.preventDefault();\r\n      const {name, comment} = this.state;\r\n      const {addComment} = this.props\r\n\r\n      addComment(name, comment, new Date().toLocaleString());\r\n    \r\n      this.setState({\r\n        name: '',\r\n        comment: ''\r\n      })\r\n    }\r\n    \r\n    render(){\r\n        const {name, comment} = this.state;\r\n        const {inputChangeHandler, formSubmitHandler} = this;\r\n        return (\r\n        <div className='position'>\r\n            <h1>Список комментариев</h1>\r\n            <form onSubmit={formSubmitHandler} >\r\n                <input onChange={inputChangeHandler} type='text' name='name' placeholder='Введите ваше имя' value={name} required></input>\r\n                <div>\r\n                    <textarea onChange={inputChangeHandler} name='comment' placeholder='Введите ваш комментарий' value={comment} required></textarea>\r\n                </div>\r\n                <button type='submit'>Добавить комментарий</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {addComment})(DataEntryForm);","import getId from '../additionalАunctions/getId';\r\nimport {ADD_COMMENT, DELETE_COMMENT} from './actionTypes'\r\n\r\nexport const addComment = (name, comment, date) => {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        id: getId(),\r\n        name,\r\n        comment,\r\n        date,\r\n    }\r\n}\r\n\r\nexport const deleteComment = (id) => {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        id\r\n    }\r\n}\r\n","export default function () {\r\n    return `f${(~~(Math.random()*1e8)).toString(16)}`;\r\n  };","import React from 'react';\r\n\r\nconst ListItem = (props) =>{\r\n    const {deleteComment, commentElements: {comment, name, id, date}} = props;\r\n            return(\r\n                <li className='comment'>\r\n                    <div>\r\n                        <button className='delete' onClick={() => deleteComment(id)}>Delete</button>\r\n                        <span className='date'>{date}</span>\r\n                    </div>\r\n                    <div className='comment_margin'>Имя:\r\n                        <p className='comment_name_p'>{name}</p>\r\n                    </div>\r\n                    <div className='comment_margin'>Комментарий:\r\n                        <p>{comment}</p>\r\n                    </div> \r\n                </li> \r\n            )\r\n}\r\n\r\nexport default ListItem","import React from 'react';\r\n\r\nimport ListItem from '../LIstItem/ListItem'\r\n\r\nconst List = ({stateComments, deleteComment}) =>{  \r\n    const listItems = stateComments.map((commentElements)=>\r\n        <ListItem deleteComment={deleteComment} commentElements={commentElements} key={commentElements.id}/>\r\n     )\r\n    return(\r\n            <ul>\r\n                {listItems}\r\n            </ul> \r\n    )\r\n}\r\n\r\nexport default List","import {JSON_PLACEHOLDER, KEY_COMMENTS} from '../constants/constants'\r\n\r\nexport class LocalStorageAPI {\r\nasync getInitialState () {\r\n   const response = await fetch(JSON_PLACEHOLDER);\r\n      if (response.ok) {\r\n        const serialisedState = localStorage.getItem(KEY_COMMENTS);\r\n          if(!serialisedState) return  []\r\n          return JSON.parse(serialisedState);\r\n      }\r\n      else {\r\n        console.log('Ошибка:' + response.status);\r\n      }\r\n}\r\n  \r\n async saveState (getState) {\r\n         const response =  await fetch(JSON_PLACEHOLDER);\r\n          if (response.ok) { \r\n              localStorage.setItem(KEY_COMMENTS, JSON.stringify(\r\n                  getState\r\n              ));\r\n          }\r\n          else {\r\n            console.log('Ошибка:' + response.status);\r\n          }\r\n      }\r\n  }\r\n \r\n\r\n","export const JSON_PLACEHOLDER = 'https://jsonplaceholder.typicode.com/todos/1';\r\nexport const KEY_COMMENTS = 'state_comments';","import React from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport List from '../../components/LIst/List'\r\nimport {deleteComment} from '../../action/index'\r\nimport {LocalStorageAPI} from '../../localStorage/storageComments'\r\n\r\n const ListComment = ({stateComments, deleteComment}) =>{\r\n    const localStorageAPI = new LocalStorageAPI();\r\n    localStorageAPI.saveState(stateComments)\r\n     return(\r\n         <List stateComments={stateComments} deleteComment={deleteComment} />\r\n     )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        stateComments: state \r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, dispatch => ({\r\n    deleteComment: id => dispatch(deleteComment(id)),\r\n}))(ListComment);","import React, {Component} from \"react\";\n\nimport DataEntryForm from '../DataEntryForm/DataEntryForm'\nimport ListComment from '../../containers/LIstContainer/ListComment'\n\nimport '../../style/App.css';\n\nclass App extends Component  {\n  render() {\n    return (\n        <React.Fragment>\n          <DataEntryForm/>\n          <ListComment/>\n        </React.Fragment>\n      );\n  }\n}\n\nexport default App; \n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\n\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk'\n\nimport widgetCommentsReducer from './reducers'\nimport App from './components/App/AppComponent';\nimport {LocalStorageAPI} from './localStorage/storageComments';\n\nimport './style/index.css';\n\nconst localStorageAPI = new LocalStorageAPI();\n\nlocalStorageAPI.getInitialState().then(response =>{\n  const store =  createStore(\n        widgetCommentsReducer,\n        response,\n        applyMiddleware(      \n          thunk\n        )   \n  )\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById('root')\n  );\n})"],"sourceRoot":""}